// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Data;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication2.Models.Annoucement", b =>
                {
                    b.Property<int>("AnnoucementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Negotiable")
                        .HasColumnType("bit");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnnoucementId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Annoucements");

                    b.HasData(
                        new
                        {
                            AnnoucementId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2020, 3, 25, 20, 15, 51, 555, DateTimeKind.Local).AddTicks(4971),
                            Description = "Brand new BMW",
                            ExpireDate = new DateTime(2020, 4, 24, 20, 15, 51, 558, DateTimeKind.Local).AddTicks(8305),
                            IsActive = false,
                            Price = 5000,
                            Title = "New car",
                            UserId = 1
                        },
                        new
                        {
                            AnnoucementId = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2020, 3, 25, 20, 15, 51, 558, DateTimeKind.Local).AddTicks(9857),
                            Description = "Used phone",
                            ExpireDate = new DateTime(2020, 4, 24, 20, 15, 51, 558, DateTimeKind.Local).AddTicks(9906),
                            IsActive = false,
                            Price = 250,
                            Title = "Iphone 6",
                            UserId = 2
                        },
                        new
                        {
                            AnnoucementId = 3,
                            CategoryId = 3,
                            CreateDate = new DateTime(2020, 3, 25, 20, 15, 51, 558, DateTimeKind.Local).AddTicks(9943),
                            Description = "From 2020 Collection",
                            ExpireDate = new DateTime(2020, 4, 24, 20, 15, 51, 558, DateTimeKind.Local).AddTicks(9949),
                            IsActive = false,
                            Price = 5000,
                            Title = "Adidas Sneackers",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WebApplication2.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Title = "Vehicles"
                        },
                        new
                        {
                            CategoryId = 2,
                            Title = "Electronics"
                        },
                        new
                        {
                            CategoryId = 3,
                            Title = "Clothes"
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Chat", b =>
                {
                    b.Property<int>("UserOneId")
                        .HasColumnType("int");

                    b.Property<int>("UserTwoId")
                        .HasColumnType("int");

                    b.HasKey("UserOneId", "UserTwoId");

                    b.HasIndex("UserTwoId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("WebApplication2.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("ChatUserOneId")
                        .HasColumnType("int");

                    b.Property<int>("ChatUserTwoId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRecievedId")
                        .HasColumnType("int");

                    b.Property<int>("UserSentId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("UserRecievedId");

                    b.HasIndex("UserSentId");

                    b.HasIndex("ChatUserOneId", "ChatUserTwoId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApplication2.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnnoucementId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoId");

                    b.HasIndex("AnnoucementId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("WebApplication2.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("WebApplication2.Models.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoordX")
                        .HasColumnType("int");

                    b.Property<int>("CoordY")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TownId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            TownId = 1,
                            CoordX = 199,
                            CoordY = 250,
                            Title = "Chisinau"
                        },
                        new
                        {
                            TownId = 2,
                            CoordX = 250,
                            CoordY = 300,
                            Title = "Balti"
                        },
                        new
                        {
                            TownId = 3,
                            CoordX = 100,
                            CoordY = 115,
                            Title = "Cahul"
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CONVERT(date, getdate())");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("TownId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Vasea@gmail.com",
                            Name = "Vasea",
                            PhoneNumber = "06546876",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TownId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Olga@gmail.com",
                            Name = "Olga",
                            PhoneNumber = "06546876",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TownId = 2
                        },
                        new
                        {
                            UserId = 3,
                            Email = "Iura@gmail.com",
                            Name = "Iura",
                            PhoneNumber = "06546876",
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TownId = 3
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Annoucement", b =>
                {
                    b.HasOne("WebApplication2.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User", "User")
                        .WithMany("Annoucements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.Brand", b =>
                {
                    b.HasOne("WebApplication2.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("WebApplication2.Models.Chat", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "UserOne")
                        .WithMany("Chats")
                        .HasForeignKey("UserOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User", "UserTwo")
                        .WithMany()
                        .HasForeignKey("UserTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.Message", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "UserRecieved")
                        .WithMany("MessagesRecieved")
                        .HasForeignKey("UserRecievedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User", "UserSent")
                        .WithMany("MessagesSent")
                        .HasForeignKey("UserSentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatUserOneId", "ChatUserTwoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.Photo", b =>
                {
                    b.HasOne("WebApplication2.Models.Annoucement", "Annoucement")
                        .WithMany("Photos")
                        .HasForeignKey("AnnoucementId");
                });

            modelBuilder.Entity("WebApplication2.Models.Subscription", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.HasOne("WebApplication2.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
